name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier and the action's run ID
      playlist_id:
        required: true
        description: The playlist ID
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Process YouTube Playlist
        id: fetch_videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID=${{ inputs.playlist_id }}
          VIDEO_ENTITIES=[]

          sanitize() {
              echo "$1" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/:/\\:/g'
          }

          nextPageToken=""
          while true; do
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")

              echo "$response" | jq -c '.items[]' | while read -r item; do
                  video_id=$(sanitize "$(echo "$item" | jq -r '.contentDetails.videoId')")
                  title=$(sanitize "$(echo "$item" | jq -r '.snippet.title')")
                  description=$(sanitize "$(echo "$item" | jq -r '.snippet.description')")
                  published_at=$(sanitize "$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')")
                  channel_id=$(sanitize "$(echo "$item" | jq -r '.snippet.channelId')")
                  channel_title=$(sanitize "$(echo "$item" | jq -r '.snippet.channelTitle')")

                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(sanitize "$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')")
                  view_count=$(sanitize "$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')")
                  like_count=$(sanitize "$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')")
                  comment_count=$(sanitize "$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')")

                  # Construct entity JSON for each video
                  video_entity=$(jq -n --arg identifier "$video_id" \
                                         --arg title "$title" \
                                         --arg description "$description" \
                                         --arg published_at "$published_at" \
                                         --arg channel_id "$channel_id" \
                                         --arg channel_title "$channel_title" \
                                         --arg duration "$duration" \
                                         --arg view_count "$view_count" \
                                         --arg like_count "$like_count" \
                                         --arg comment_count "$comment_count" \
                                         '{
                                             identifier: $identifier,
                                             title: $title,
                                             properties: {
                                                 id: $identifier,
                                                 title: $title,
                                                 description: $description,
                                                 published_at: $published_at,
                                                 channel_id: $channel_id,
                                                 channel_title: $channel_title,
                                                 duration: $duration,
                                                 view_count: $view_count,
                                                 like_count: $like_count,
                                                 comment_count: $comment_count
                                             },
                                             relations: {}
                                         }')

                  # Append each video entity to VIDEO_ENTITIES
                  VIDEO_ENTITIES=$(echo "$VIDEO_ENTITIES" | jq ". + [$video_entity]")
              done

              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

          echo "VIDEO_ENTITIES=$VIDEO_ENTITIES" >> $GITHUB_ENV

      - name: Debug VIDEO_ENTITIES
        run: |
          echo "VIDEO_ENTITIES:"
          echo "${{ env.VIDEO_ENTITIES }}" | jq '.'

      - name: Upsert Playlist Videos to Port
        uses: port-labs/port-github-action@v1
        env:
          VIDEO_ENTITIES: ${{ env.VIDEO_ENTITIES }}
        with:
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          entities: ${{ env.VIDEO_ENTITIES }}
          runId: ${{ fromJson(inputs.port_context).run_id }}
