name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier and the action's run ID
      playlist_id:
        required: true
        description: The playlist ID
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Ingest YouTube Playlist Videos
        id: fetch_videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID=${{ inputs.playlist_id }}
          nextPageToken=""

          while true; do
              # Fetch playlist items
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")
              
              echo "$response" | jq -c '.items[]' | while read -r item; do
                  video_id=$(echo "$item" | jq -r '.contentDetails.videoId')
                  title=$(echo "$item" | jq -r '.snippet.title')
                  description=$(echo "$item" | jq -r '.snippet.description')
                  published_at=$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')
                  channel_id=$(echo "$item" | jq -r '.snippet.channelId')
                  channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')

                  # Fetch additional video details
                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
                  view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')
                  like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')
                  comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')

                  # Prepare GitHub Action outputs for each video
                  echo "::set-output name=video_${video_id}_data::$(jq -n --arg identifier "$video_id" \
                      --arg title "$title" \
                      --arg description "$description" \
                      --arg published_at "$published_at" \
                      --arg channel_id "$channel_id" \
                      --arg channel_title "$channel_title" \
                      --arg duration "$duration" \
                      --argjson view_count "$view_count" \
                      --argjson like_count "$like_count" \
                      --argjson comment_count "$comment_count" \
                      '{
                          identifier: $identifier,
                          title: $title,
                          properties: {
                              id: $identifier,
                              description: $description,
                              title: $title,
                              published_at: $published_at,
                              channel_id: $channel_id,
                              channel_title: $channel_title,
                              duration: $duration,
                              view_count: $view_count,
                              like_count: $like_count,
                              comment_count: $comment_count
                          },
                          relations: {}
                      }')"
              done

              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

      - name: UPSERT Playlist Videos in Port
        uses: port-labs/port-github-action@v1
        with:
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          properties: |
            {
              "id": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.id }}",
              "title": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.title }}",
              "description": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.description }}",
              "published_at": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.published_at }}",
              "channel_id": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.channel_id }}",
              "channel_title": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.channel_title }}",
              "duration": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.duration }}",
              "view_count": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.view_count }}",
              "like_count": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.like_count }}",
              "comment_count": "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).properties.comment_count }}"
            }
          identifier: "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).identifier }}"
          title: "${{ fromJson(steps.fetch_videos.outputs.video_${video_id}_data).title }}"
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          runId: ${{ fromJson(inputs.port_context).run_id }}
