name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier, and the action's run id
      playlist_id:
        required: true
        description: The playlist id
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Ingest YouTube Playlist to Port
        id: fetch_videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID=${{ inputs.playlist_id }}

          # Initialize the JSON array
          data="[]"

          # Fetch Playlist Videos from YouTube API
          nextPageToken=""
          while true; do
              # Fetch the current page of videos
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")

              # Process each video in the response
              page_videos=$(echo "$response" | jq -c '[.items[] | {
                  identifier: .contentDetails.videoId,
                  title: .snippet.title,
                  properties: {
                      id: .contentDetails.videoId,
                      description: .snippet.description,
                      title: .snippet.title,
                      published_at: .contentDetails.videoPublishedAt,
                      channel_id: .snippet.channelId,
                      channel_title: .snippet.channelTitle,
                      additional_details: (
                          # Fetch additional video details
                          (curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=\(.contentDetails.videoId)&key=$YOUTUBE_API_KEY") | .items[0] | {
                              duration: .contentDetails.duration,
                              view_count: (.statistics.viewCount | tonumber),
                              like_count: (.statistics.likeCount | tonumber),
                              comment_count: (.statistics.commentCount | tonumber)
                          }
                      )
                  },
                  relations: {}
              }]')

              # Merge the current page videos with the main array
              data=$(echo "$data" | jq --argjson new_videos "$page_videos" '. + $new_videos')

              # Check if there's another page of results
              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

          # Debugging: Output the collected data
          echo "Collected data:"
          echo "$data" | jq .

          # Export the data for use in the next step
          echo "data=$data" >> $GITHUB_OUTPUT

      - name: UPSERT playlist
        uses: port-labs/port-github-action@v1
        with:
          identifier: "${{ fromJson(inputs.port_context).blueprint }}"
          title: "YouTube Playlist Videos"
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: BULK_UPSERT
          runId: ${{ fromJson(inputs.port_context).run_id }}
          entities: ${{ steps.fetch_videos.outputs.data }}
