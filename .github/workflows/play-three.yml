name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier, and the action's run ID.
      playlist_id:
        required: true
        description: The playlist ID.
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Ingest YouTube Playlist to Port
        id: fetch_videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          PLAYLIST_ID=${{ inputs.playlist_id }}
          video_array="[]" # Initialize an empty JSON array

          nextPageToken=""
          while true; do
              # Fetch playlist items
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")
              
              # Process each video
              echo "$response" | jq -c '.items[]' | while read -r item; do
                  # Extract video metadata
                  video_id=$(echo "$item" | jq -r '.contentDetails.videoId')
                  title=$(echo "$item" | jq -r '.snippet.title')
                  description=$(echo "$item" | jq -r '.snippet.description')
                  published_at=$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')
                  channel_id=$(echo "$item" | jq -r '.snippet.channelId')
                  channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')

                  # Fetch additional details for video
                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
                  view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')
                  like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')
                  comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')

                  # Create video JSON object
                  video_data=$(jq -n \
                    --arg identifier "$video_id" \
                    --arg title "$title" \
                    --arg description "$description" \
                    --arg published_at "$published_at" \
                    --arg channel_id "$channel_id" \
                    --arg channel_title "$channel_title" \
                    --arg duration "$duration" \
                    --argjson view_count "$view_count" \
                    --argjson like_count "$like_count" \
                    --argjson comment_count "$comment_count" \
                    '{
                        identifier: $identifier,
                        title: $title,
                        properties: {
                            id: $identifier,
                            description: $description,
                            title: $title,
                            published_at: $published_at,
                            channel_id: $channel_id,
                            channel_title: $channel_title,
                            duration: $duration,
                            view_count: $view_count,
                            like_count: $like_count,
                            comment_count: $comment_count
                        },
                        relations: {}
                    }')

                  # Append the video JSON object to the array
                  video_array=$(echo "$video_array" | jq ". + [$video_data]")
                  echo Work fine "$video_array"
              done

              # Check if more pages exist
              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

          # Output the final video array
          echo "video_array=$video_array" >> $GITHUB_OUTPUT

      - name: UPSERT playlist
        uses: port-labs/port-github-action@v1
        with:
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: BULK_UPSERT
          runId: ${{ fromJson(inputs.port_context).run_id }}
          entities: ${{ steps.fetch_videos.outputs.video_array }}
