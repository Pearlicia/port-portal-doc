name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier and the action's run ID
      playlist_id:
        required: true
        description: The playlist ID
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch YouTube Playlist Videos and Prepare Data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          # Define inputs
          PLAYLIST_ID=${{ inputs.playlist_id }}
          PORT_CONTEXT=${{ inputs.port_context }}
          blueprint_id=$(echo $PORT_CONTEXT | jq -r '.blueprint')
          run_id=$(echo $PORT_CONTEXT | jq -r '.runId')

          # Initialize a temporary file for storing entities to upsert
          ENTITY_FILE=$(mktemp)

          # Fetch playlist details (id and title)
          playlist_details=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet&id=$PLAYLIST_ID&key=$YOUTUBE_API_KEY")
          playlist_id=$(echo "$playlist_details" | jq -r '.items[0].id')
          playlist_title=$(echo "$playlist_details" | jq -r '.items[0].snippet.title')

          # Fetch videos from the playlist and construct payloads
          nextPageToken=""
          while true; do
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")

              echo "$response" | jq -c '.items[]' | while read -r item; do
                  video_id=$(echo "$item" | jq -r '.contentDetails.videoId')
                  title=$(echo "$item" | jq -r '.snippet.title')
                  description=$(echo "$item" | jq -r '.snippet.description')
                  published_at=$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')
                  channel_id=$(echo "$item" | jq -r '.snippet.channelId')
                  channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')

                  # Fetch additional video details
                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
                  view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')
                  like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')
                  comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')

                  # Add payload to the entity file
                  jq -n --arg identifier "$video_id" \
                           --arg title "$title" \
                           --arg playlist_id "$playlist_id" \
                           --arg playlist_title "$playlist_title" \
                           --arg blueprint "$blueprint_id" \
                           --arg runId "$run_id" \
                           --arg description "$description" \
                           --arg published_at "$published_at" \
                           --arg channel_id "$channel_id" \
                           --arg channel_title "$channel_title" \
                           --arg duration "$duration" \
                           --argjson view_count "$view_count" \
                           --argjson like_count "$like_count" \
                           --argjson comment_count "$comment_count" \
                           '{
                               identifier: $identifier,
                               title: $title,
                               blueprint: $blueprint,
                               runId: $runId,
                               properties: {
                                   playlist_id: $playlist_id,
                                   playlist_title: $playlist_title,
                                   description: $description,
                                   channel_id: $channel_id,
                                   channel_title: $channel_title,
                                   published_at: $published_at,
                                   view_count: $view_count,
                                   like_count: $like_count,
                                   comment_count: $comment_count,
                                   duration: $duration
                               }
                           }' >> $ENTITY_FILE
              done

              # Check for the next page
              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

      - name: UPSERT Playlist Data into Port
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).video_id }}
          title: ${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).title }}
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          runId: ${{ fromJson(inputs.port_context).runId }}
          properties: |-
            {
              "playlist_id": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).playlist_id }}",
              "playlist_title": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).playlist_title }}",
              "description": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).description }}",
              "channel_id": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).channel_id }}",
              "channel_title": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).channel_title }}",
              "published_at": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).published_at }}",
              "view_count": ${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).view_count }},
              "like_count": ${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).like_count }},
              "comment_count": ${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).comment_count }},
              "duration": "${{ fromJson(steps.Fetch_YouTube_Playlist_Videos_and_Prepare_Data.outputs.response).duration }}"
            }
          relations: "${{ toJson(fromJson(inputs.port_context).relations) }}"
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
