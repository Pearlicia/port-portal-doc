name: Fetch YouTube Playlist and Videos, Upload to Port

on:
  push:
    branches:
      - feat  # Trigger the workflow on commits to the main branch

jobs:
  fetch_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Fetch YouTube Playlist Metadata
        id: fetch_playlist
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          playlistId="PL-7fHWfrqQvEUgrFz5pE-NWd6-8ixbX8w"  # Ensure only playlist ID
          response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet&id=${playlistId}&key=${YOUTUBE_API_KEY}")
          echo "$response" > playlist_metadata.json

      - name: Fetch Videos in Playlist
        id: fetch_videos
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          playlistId="PL-7fHWfrqQvEUgrFz5pE-NWd6-8ixbX8w"
          response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&maxResults=50&playlistId=${playlistId}&key=${YOUTUBE_API_KEY}")
          echo "$response" > videos_data.json

      - name: Fetch Video Details (Duration, Views, Likes, Comments)
        id: fetch_video_details
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          video_ids=$(cat videos_data.json | jq -r '.items[].contentDetails.videoId' | paste -sd, -)
          response=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=contentDetails,statistics&id=${video_ids}&key=${YOUTUBE_API_KEY}")
          echo "$response" > video_details.json

      - name: Parse Playlist and Video Data
        id: parse_data
        run: |
          # Parse playlist metadata
          playlist_data=$(jq -c '.items[0] | {
            id: .id,
            title: .snippet.title,
            description: .snippet.description,
            channel_id: .snippet.channelId,
            channel_title: .snippet.channelTitle,
            published_at: .snippet.publishedAt
          }' playlist_metadata.json)
          echo "::set-output name=playlist_data::$playlist_data"

          # Initialize an empty JSON array for videos
          echo "[]" > parsed_videos.json

          # Parse videos in the playlist with additional details
          jq -c '.items[]' video_details.json | while read video; do
            video_id=$(echo $video | jq -r '.id')
            duration=$(echo $video | jq -r '.contentDetails.duration')
            view_count=$(echo $video | jq -r '.statistics.viewCount')
            like_count=$(echo $video | jq -r '.statistics.likeCount')
            comment_count=$(echo $video | jq -r '.statistics.commentCount')
            video_data=$(cat videos_data.json | jq -c --arg video_id "$video_id" --arg duration "$duration" --arg view_count "$view_count" --arg like_count "$like_count" --arg comment_count "$comment_count" '
              .items[] | select(.contentDetails.videoId == $video_id) | {
                id: .contentDetails.videoId,
                title: .snippet.title,
                description: .snippet.description,
                playlist_id: "PL-7fHWfrqQvEUgrFz5pE-NWd6-8ixbX8w",
                channel_id: .snippet.channelId,
                published_at: .snippet.publishedAt,
                duration: $duration,
                views: $view_count,
                likes: $like_count,
                comments: $comment_count
              }')
            # Append each video data object to the array
            jq --argjson video "$video_data" '. += [$video]' parsed_videos.json > tmp.json && mv tmp.json parsed_videos.json
          done

          videos_data=$(cat parsed_videos.json)
          echo "::set-output name=videos_data::$videos_data"

      - name: Upload Playlist Metadata to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ steps.parse_data.outputs.playlist_data.id }}
          title: ${{ steps.parse_data.outputs.playlist_data.title }}
          blueprint: playlist
          properties: ${{ steps.parse_data.outputs.playlist_data }}

      - name: Upload Videos Metadata to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ steps.parse_data.outputs.videos_data }}
          title: ${{ steps.parse_data.outputs.videos_data.title }}
          blueprint: video
          properties: ${{ steps.parse_data.outputs.videos_data }}
