name: YouTube Playlist to Port Ingestion

on:
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier, and the action's run id
      playlist_id:
        required: true
        description: The playlist id
        type: string

jobs:
  ingest-playlist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Ingest YouTube Playlist to Port
        id: fetch_and_ingest
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          # Set the playlist ID and blueprint ID
          PLAYLIST_ID=${{ inputs.playlist_id }}
          blueprint_id=${{ fromJson(inputs.port_context).blueprint }}
          run_id=${{ fromJson(inputs.port_context).run_id }}

          # Initialize variables
          nextPageToken=""
          all_video_data=""

          while true; do
              # Fetch videos in the playlist (one page at a time)
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")

              # Parse and iterate over each video
              echo "$response" | jq -c '.items[]' | while read -r item; do
                  video_id=$(echo "$item" | jq -r '.contentDetails.videoId')
                  title=$(echo "$item" | jq -r '.snippet.title')
                  description=$(echo "$item" | jq -r '.snippet.description')
                  published_at=$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')
                  channel_id=$(echo "$item" | jq -r '.snippet.channelId')
                  channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')

                  # Step 3: Fetch Additional Video Details
                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
                  view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')
                  like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')
                  comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')

                  # Prepare data for Port API ingestion
                  data=$(jq -n --arg identifier "$video_id" \
                                 --arg title "$title" \
                                 --arg id "$video_id" \
                                 --arg description "$description" \
                                 --arg published_at "$published_at" \
                                 --arg channel_id "$channel_id" \
                                 --arg channel_title "$channel_title" \
                                 --arg duration "$duration" \
                                 --argjson view_count "$view_count" \
                                 --argjson like_count "$like_count" \
                                 --argjson comment_count "$comment_count" \
                                 '{
                                     identifier: $identifier,
                                     title: $title,
                                     properties: {
                                         id: $id,
                                         description: $description,
                                         title: $title,
                                         published_at: $published_at,
                                         channel_id: $channel_id,
                                         channel_title: $channel_title,
                                         duration: $duration,
                                         view_count: $view_count,
                                         like_count: $like_count,
                                         comment_count: $comment_count
                                     },
                                     relations: {}
                                 }')

                  # Append the current video data to the all_video_data variable
                  all_video_data="$all_video_data$data,"
              done

              # Check if there is another page of results
              nextPageToken=$(echo "$response" | jq -r '.nextPageToken')
              [ "$nextPageToken" == "null" ] && break
          done

          # Remove trailing comma and set output
          echo "::set-output name=video_data::[${all_video_data%,}]"

      - name: UPSERT Entity
        uses: port-labs/port-github-action@v1
        with:
          identifier: ${{ fromJson(steps.fetch_and_ingest.outputs.video_data)[0].identifier }}
          title: ${{ fromJson(steps.fetch_and_ingest.outputs.video_data)[0].title }}
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          runId: ${{ fromJson(inputs.port_context).run_id }}
          properties: ${{ toJson(fromJson(steps.fetch_and_ingest.outputs.video_data)[0].properties) }}
          relations: "{}"
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
