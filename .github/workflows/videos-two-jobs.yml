name: YouTube Playlist to Port Ingestion

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      port_context:
        required: true
        description: Includes the blueprint identifier, and the action's run id
      playlist_id:
        required: true
        description: The playlist id
        type: string

jobs:
  get-access-token:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get Access Token
        id: get-token
        env:
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          access_token=$(curl --location --request POST 'https://api.getport.io/v1/auth/access_token' \
          --header 'Content-Type: application/json' \
          --data-raw "{
              \"clientId\": \"$PORT_CLIENT_ID\",
              \"clientSecret\": \"$PORT_CLIENT_SECRET\"
          }" | jq -r '.accessToken')

          if [ -z "$access_token" ]; then
            echo "Failed to retrieve access token. Exiting."
            exit 1
          fi

          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_ENV


  upsert-playlist-data:
    runs-on: ubuntu-latest
    needs: get-access-token
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch and Upsert YouTube Playlist Data to Port
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "ACCESS_TOKEN is not set. Exiting."
            exit 1
          fi

          # Set the playlist ID and blueprint ID
          PLAYLIST_ID="PL-7fHWfrqQvEUgrFz5pE-NWd6-8ixbX8w"
          blueprint_id="playlist"

          # Initialize nextPageToken
          nextPageToken=""
          while true; do
              response=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&playlistId=$PLAYLIST_ID&maxResults=50&pageToken=$nextPageToken&key=$YOUTUBE_API_KEY")

              echo "$response" | jq -c '.items[]?' | while read -r item; do
                  video_id=$(echo "$item" | jq -r '.contentDetails.videoId')
                  title=$(echo "$item" | jq -r '.snippet.title')
                  description=$(echo "$item" | jq -r '.snippet.description')
                  published_at=$(echo "$item" | jq -r '.contentDetails.videoPublishedAt')
                  channel_id=$(echo "$item" | jq -r '.snippet.channelId')
                  channel_title=$(echo "$item" | jq -r '.snippet.channelTitle')

                  # Fetch Additional Video Details
                  video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=statistics,contentDetails&id=$video_id&key=$YOUTUBE_API_KEY")
                  duration=$(echo "$video_details" | jq -r '.items[0].contentDetails.duration')
                  view_count=$(echo "$video_details" | jq -r '.items[0].statistics.viewCount | tonumber')
                  like_count=$(echo "$video_details" | jq -r '.items[0].statistics.likeCount | tonumber')
                  comment_count=$(echo "$video_details" | jq -r '.items[0].statistics.commentCount | tonumber')

                  # Prepare data for Port API ingestion
                  data=$(jq -n --arg identifier "$video_id" \
                                 --arg title "$title" \
                                 --arg id "$video_id" \
                                 --arg description "$description" \
                                 --arg published_at "$published_at" \
                                 --arg channel_id "$channel_id" \
                                 --arg channel_title "$channel_title" \
                                 --arg duration "$duration" \
                                 --arg view_count "$view_count" \
                                 --arg like_count "$like_count" \
                                 --arg comment_count "$comment_count" \
                                 '{
                                     identifier: $identifier,
                                     title: $title,
                                     properties: {
                                         id: $id,
                                         description: $description,
                                         title: $title,
                                         published_at: $published_at,
                                         channel_id: $channel_id,
                                         channel_title: $channel_title,
                                         duration: $duration,
                                         view_count: $view_count,
                                         like_count: $like_count,
                                         comment_count: $comment_count
                                     },
                                     relations: {
                                         playlist: "related_entity_identifier"
                                     }
                                 }')

                  # Ingest data into Port
                  curl --location --request POST "https://api.getport.io/v1/blueprints/${blueprint_id}/entities?upsert=true" \
                  --header "Authorization: Bearer $ACCESS_TOKEN" \
                  --header "Content-Type: application/json" \
                  --data-raw "$data"

                  echo "Uploaded video $title ($video_id) to Port."
              done

              # Check if there is another page of results
              nextPageToken=$(echo "$response" | jq -r '.nextPageToken // empty')
              [ -z "$nextPageToken" ] && break
          done

  report-status:
    runs-on: ubuntu-latest
    needs: upsert-playlist-data
    steps:
      - name: Report Status to Port
        run: |
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "ACCESS_TOKEN is not set. Exiting."
            exit 1
          fi

          status="Playlist ingestion completed successfully"
          curl --location --request POST "https://api.getport.io/v1/status" \
          --header "Authorization: Bearer $ACCESS_TOKEN" \
          --header "Content-Type: application/json" \
          --data-raw "{
              \"status\": \"$status\",
              \"description\": \"YouTube playlist ingestion job completed.\"
          }"
          echo "Reported status back to Port."
